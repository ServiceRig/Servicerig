
'use client';

import { useState, useMemo } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { mockData } from '@/lib/mock-data';
import type { ShoppingListItem } from '@/lib/types';
import { useToast } from '@/hooks/use-toast';
import { FilePlus, Download } from 'lucide-react';
import { unparse } from 'papaparse';
import { format } from 'date-fns';

export function ShoppingList() {
    const { toast } = useToast();
    const [shoppingList, setShoppingList] = useState<ShoppingListItem[]>(() => {
        const autoGenerated: ShoppingListItem[] = mockData.inventoryItems
            .filter(item => item.quantityOnHand <= item.reorderThreshold)
            .map(item => ({
                itemId: item.id,
                itemName: item.name,
                quantityNeeded: item.reorderQtyDefault,
                reason: 'Below reorder threshold'
            }));
        
        // Use a map to consolidate requests for the same item
        const consolidatedMap = new Map<string, ShoppingListItem>();

        // Add auto-generated items first
        autoGenerated.forEach(item => {
            const existing = consolidatedMap.get(item.itemId);
            if (existing) {
                existing.quantityNeeded = Math.max(existing.quantityNeeded, item.quantityNeeded); // Take the larger reorder qty
            } else {
                consolidatedMap.set(item.itemId, { ...item });
            }
        });
        
        // Add items from approved technician requests
        (mockData.shoppingList || []).forEach(item => {
            const existing = consolidatedMap.get(item.itemId);
            if (existing) {
                existing.quantityNeeded += item.quantityNeeded;
                if (!existing.reason?.includes('Technician Request')) {
                    existing.reason += ' + Technician Request';
                }
            } else {
                consolidatedMap.set(item.itemId, { ...item, reason: 'Technician Request' });
            }
        });

        return Array.from(consolidatedMap.values());
    });

    const [selectedItems, setSelectedItems] = useState<Set<string>>(new Set());

    const handleSelectAll = (checked: boolean) => {
        if (checked) {
            setSelectedItems(new Set(shoppingList.map(item => item.itemId)));
        } else {
            setSelectedItems(new Set());
        }
    }
    
    const handleSelectRow = (itemId: string, checked: boolean) => {
        setSelectedItems(prev => {
            const newSet = new Set(prev);
            if (checked) newSet.add(itemId);
            else newSet.delete(itemId);
            return newSet;
        });
    }
    
    const handleExport = () => {
        const dataToExport = shoppingList.map(item => ({
            'Part Name': item.itemName,
            'SKU': mockData.inventoryItems.find(i => i.id === item.itemId)?.sku || 'N/A',
            'Quantity Needed': item.quantityNeeded,
            'Reason': item.reason,
        }));
        
        const csv = unparse(dataToExport);
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        const url = URL.createObjectURL(blob);
        link.setAttribute('href', url);
        link.setAttribute('download', `shopping-list-${format(new Date(), 'yyyy-MM-dd')}.csv`);
        link.style.visibility = 'hidden';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
    
    const handleCreatePO = () => {
        if(selectedItems.size === 0) {
            toast({ variant: 'destructive', title: 'No items selected' });
            return;
        }
        toast({ title: `Creating PO for ${selectedItems.size} items...` });
        // In a real app, this would open a new PO creation dialog or page.
    }

    return (
        <Card>
            <CardHeader className="flex flex-row items-center justify-between">
                <div>
                    <CardTitle>Master Shopping List</CardTitle>
                    <CardDescription>A consolidated list of all parts that need to be ordered.</CardDescription>
                </div>
                 <div className="flex items-center gap-2">
                    <Button variant="outline" onClick={handleExport}>
                        <Download className="mr-2 h-4 w-4" /> Export CSV
                    </Button>
                    <Button onClick={handleCreatePO} disabled={selectedItems.size === 0}>
                        <FilePlus className="mr-2 h-4 w-4" /> Create Purchase Order
                    </Button>
                </div>
            </CardHeader>
            <CardContent>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead className="w-[50px]">
                                <Checkbox
                                    checked={selectedItems.size > 0 && selectedItems.size === shoppingList.length}
                                    onCheckedChange={handleSelectAll}
                                />
                            </TableHead>
                            <TableHead>Part Name</TableHead>
                            <TableHead>Quantity Needed</TableHead>
                            <TableHead>Reason</TableHead>
                            <TableHead>Vendor</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {shoppingList.length > 0 ? shoppingList.map(item => (
                            <TableRow key={item.itemId}>
                                <TableCell>
                                    <Checkbox
                                        checked={selectedItems.has(item.itemId)}
                                        onCheckedChange={(checked) => handleSelectRow(item.itemId, !!checked)}
                                    />
                                </TableCell>
                                <TableCell className="font-medium">{item.itemName}</TableCell>
                                <TableCell className="font-bold text-lg">{item.quantityNeeded}</TableCell>
                                <TableCell>{item.reason}</TableCell>
                                <TableCell>{mockData.inventoryItems.find(i => i.id === item.itemId)?.vendor || 'N/A'}</TableCell>
                            </TableRow>
                        )) : (
                            <TableRow><TableCell colSpan={5} className="h-24 text-center">Your shopping list is empty.</TableCell></TableRow>
                        )}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    );
}
